/*******************************************************************************
 * Copyright 2015 Esri
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 ******************************************************************************/
package com.esri.vehiclecommander.view;

import com.esri.militaryapps.controller.AdvancedSymbolController;
import java.awt.Frame;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 * A dialog that allows the user to clear messages from the map.
 */
public class ClearMessagesDialog extends javax.swing.JDialog {
    
    private static final String ALL_LAYERS = "All Layers";
    
    private static ClearMessagesDialog instance = null;
    
    private final AdvancedSymbolController advancedSymbolController;
    
    /**
     * Creates and returns and instance of ClearMessagesDialog, disposing any other
     * instance that was created.
     * @param parent the parent frame.
     * @param modal true if the dialog should be modal (i.e. block the user from
     *        interacting with the rest of the application until the dialog is closed)
     * @param layerNames the names of the layers that can be cleared through the
     *        provided AdvancedSymbolController
     * @param advancedSymbolController the AdvancedSymbolController through which
     *        the layers should be cleared.
     * @return 
     */
    public static ClearMessagesDialog getInstance(Frame parent,
            boolean modal,
            List<String> layerNames,
            AdvancedSymbolController advancedSymbolController) {
        if (null != instance) {
            instance.dispose();
        }
        instance = new ClearMessagesDialog(parent, modal, layerNames, advancedSymbolController);
        return instance;
    }
    
    private ClearMessagesDialog(
            Frame parent,
            boolean modal,
            List<String> layerNames,
            AdvancedSymbolController advancedSymbolController) {
        super(parent, modal);
        this.advancedSymbolController = advancedSymbolController;

        initComponents();
        
        DefaultListModel<String> listModel = new DefaultListModel<>();
        listModel.addElement(ALL_LAYERS);
        for (String layerName : layerNames) {
            listModel.addElement(layerName);
        }
        jList_layerToClear.setModel(listModel);

        jList_layerToClear.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                boolean sendRemoveMessage = jCheckBox_sendRemoveMessage.isSelected();
                String text = (String) jList_layerToClear.getSelectedValue();
                if (ALL_LAYERS.equals(text)) {
                    ClearMessagesDialog.this.advancedSymbolController.clearAllMessages(sendRemoveMessage);
                } else {
                    ClearMessagesDialog.this.advancedSymbolController.clearLayer(text, sendRemoveMessage);
                }
                
                //Close the dialog
                new Thread() {

                    @Override
                    public void run() {
                        ClearMessagesDialog.this.dispose();
                    }
                    
                }.start();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox_sendRemoveMessage = new javax.swing.JCheckBox();
        jScrollPane_layerToClear = new javax.swing.JScrollPane();
        jList_layerToClear = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Clear Messages");

        jCheckBox_sendRemoveMessage.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jCheckBox_sendRemoveMessage.setText("Tell other users' devices to delete my messages");
        jCheckBox_sendRemoveMessage.setFocusable(false);

        jScrollPane_layerToClear.setFocusable(false);

        jList_layerToClear.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jList_layerToClear.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList_layerToClear.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane_layerToClear.setViewportView(jList_layerToClear);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane_layerToClear)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCheckBox_sendRemoveMessage)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox_sendRemoveMessage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane_layerToClear, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox_sendRemoveMessage;
    private javax.swing.JList jList_layerToClear;
    private javax.swing.JScrollPane jScrollPane_layerToClear;
    // End of variables declaration//GEN-END:variables
}
