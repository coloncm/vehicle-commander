/*******************************************************************************
 * Copyright 2012-2014 Esri
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 ******************************************************************************/
package com.esri.vehiclecommander.view;

import com.esri.vehiclecommander.model.BasemapLayer;
import com.esri.vehiclecommander.util.Utilities;
import java.awt.Color;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;

/**
 * A widget with a button and a label that allows a user to turn on a basemap.
 */
public class BasemapWidget extends javax.swing.JPanel {
    
    private static final String[] LAYER_NAMES_TOPO = { "Topographic", "Topo" };
    private static final String[] LAYER_NAMES_IMAGERY = { "Imagery", "Image", "Aerial" };
    private static final String[] LAYER_NAMES_SCANNED = { "Scanned", "Scanned Maps", "ScannedMaps" };
    private static final HashMap<String[], String> LAYER_NAME_LIST_TO_IMAGE =
            new HashMap<String[], String>();
    static {
        LAYER_NAME_LIST_TO_IMAGE.put(LAYER_NAMES_TOPO, "/com/esri/vehiclecommander/resources/thumbnail_topo.png");
        LAYER_NAME_LIST_TO_IMAGE.put(LAYER_NAMES_IMAGERY, "/com/esri/vehiclecommander/resources/thumbnail_imagery.png");
        LAYER_NAME_LIST_TO_IMAGE.put(LAYER_NAMES_SCANNED, "/com/esri/vehiclecommander/resources/thumbnail_scanned.png");
    }
    private static final Border BORDER_SELECTED = new LineBorder(Color.RED, 2, true);
    private static final Border BORDER_UNSELECTED = new LineBorder(Color.WHITE, 2, true);
    
    private final BasemapLayer layer;
    private final ArrayList<BasemapListener> listeners = new ArrayList<BasemapListener>();
    
    private static Icon guessIconForLayerName(String layerName) {
        if (null == layerName) {
            return null;
        }
        layerName = layerName.trim();
        Iterator<String[]> iterator = LAYER_NAME_LIST_TO_IMAGE.keySet().iterator();
        while (iterator.hasNext()) {
            String[] layerNames = iterator.next();
            for (String thisName : layerNames) {
                thisName = thisName.trim();
                if (layerName.equalsIgnoreCase(thisName)) {
                    return new ImageIcon(BasemapWidget.class.getResource(LAYER_NAME_LIST_TO_IMAGE.get(layerNames)));
                }
            }
        }
        return null;
    }
    
    public BasemapWidget(BasemapLayer layer, ButtonGroup buttonGroup) {
        initComponents();
        this.layer = layer;
        if (layer.getLayer().isVisible()) {
            jToggleButton_showBasemap.setSelected(true);
            jToggleButton_showBasemap.setBorder(BORDER_SELECTED);
        } else {
            jToggleButton_showBasemap.setBorder(BORDER_UNSELECTED);
        }
        jLabel_label.setText("<html>" + layer.getLayer().getName() + "</html>");
        
        Icon icon = layer.getThumbnail();
        if (null == icon) {
            icon = guessIconForLayerName(layer.getLayer().getName());
        }
        if (null != icon) {
            if (null != icon && icon instanceof ImageIcon) {
                ImageIcon imageIcon = (ImageIcon) icon;
                icon = Utilities.rescale(imageIcon, jToggleButton_showBasemap.getPreferredSize(), this);
            }
            jToggleButton_showBasemap.setIcon(icon);
        }
        
        setSize(getLayout().preferredLayoutSize(this));
        
        buttonGroup.add(jToggleButton_showBasemap);
    }
    
    public void addBasemapListener(BasemapListener listener) {
        synchronized (listeners) {
            listeners.add(listener);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel_label = new javax.swing.JLabel();
        jToggleButton_showBasemap = new javax.swing.JToggleButton();

        setMaximumSize(new java.awt.Dimension(150, 117));
        setMinimumSize(new java.awt.Dimension(150, 117));
        setOpaque(false);

        jLabel_label.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_label.setText("<html>Basemap</html>");

        jToggleButton_showBasemap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/esri/vehiclecommander/resources/thumbnail_generic.png"))); // NOI18N
        jToggleButton_showBasemap.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        jToggleButton_showBasemap.setFocusable(false);
        jToggleButton_showBasemap.setMaximumSize(new java.awt.Dimension(100, 67));
        jToggleButton_showBasemap.setMinimumSize(new java.awt.Dimension(100, 67));
        jToggleButton_showBasemap.setPreferredSize(new java.awt.Dimension(100, 67));
        jToggleButton_showBasemap.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jToggleButton_showBasemapStateChanged(evt);
            }
        });
        jToggleButton_showBasemap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton_showBasemapActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel_label, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jToggleButton_showBasemap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToggleButton_showBasemap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton_showBasemapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton_showBasemapActionPerformed
        layer.getLayer().setVisible(true);
        jToggleButton_showBasemap.setBorder(BORDER_SELECTED);
        synchronized (listeners) {
            for (BasemapListener listener : listeners) {
                listener.basemapBecameVisible(layer.getLayer());
            }
        }
    }//GEN-LAST:event_jToggleButton_showBasemapActionPerformed

    private void jToggleButton_showBasemapStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jToggleButton_showBasemapStateChanged
        if (!jToggleButton_showBasemap.isSelected()) {
            jToggleButton_showBasemap.setBorder(BORDER_UNSELECTED);
        }
    }//GEN-LAST:event_jToggleButton_showBasemapStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel_label;
    private javax.swing.JToggleButton jToggleButton_showBasemap;
    // End of variables declaration//GEN-END:variables
}
