/*******************************************************************************
 * Copyright 2012-2014 Esri
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 ******************************************************************************/
package com.esri.vehiclecommander.view;

import com.esri.toolkit.utilities.BrowserLauncher;
import com.esri.core.geometry.Envelope;
import com.esri.core.geometry.Geometry;
import com.esri.core.geometry.GeometryEngine;
import com.esri.core.geometry.Point;
import com.esri.core.geometry.Polygon;
import com.esri.core.geometry.Polyline;
import com.esri.core.geometry.Segment;
import com.esri.core.map.AttachmentInfo;
import com.esri.core.map.CallbackListener;
import com.esri.core.map.Graphic;
import com.esri.core.symbol.PictureMarkerSymbol;
import com.esri.core.symbol.SimpleFillSymbol;
import com.esri.core.symbol.SimpleLineSymbol;
import com.esri.core.symbol.SimpleMarkerSymbol;
import com.esri.core.symbol.Symbol;
import com.esri.map.ArcGISFeatureLayer;
import com.esri.map.GraphicsLayer;
import com.esri.map.Layer;
import com.esri.militaryapps.controller.LocationListener;
import com.esri.militaryapps.model.Location;
import com.esri.militaryapps.model.LocationProvider;
import com.esri.vehiclecommander.controller.MapController;
import com.esri.vehiclecommander.model.IdentifiedItem;
import com.esri.vehiclecommander.util.Utilities;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.LayoutManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JButton;
import javax.swing.JLabel;

/**
 * A panel for displaying identify results.
 */
public class IdentifyResultsJPanel extends RoundedJPanel implements LocationListener {

    private static final long serialVersionUID = 253026308130677536L;
    private IdentifiedItem[] results = null;
    private Map<IdentifiedItem, Layer> resultToLayer = null;
    private int currentIndex = 0;
    private final GraphicsLayer graphicsLayer;
    private final MapController mapController;
    private boolean isGraphicsLayerAdded = false;
    private final SimpleLineSymbol lineSymbol;
    private final SimpleFillSymbol fillSymbol;
    private final SimpleMarkerSymbol markerSymbol;
    private final Symbol identifyPointSymbol;
    private Point gpsLocationLatLon = null;
    private final Object gpsLocationLatLonLock = new Object();
    private Point identifyPoint = null;
    private int identifyPointGraphicUid = -1;
    private int identifyFeatureGraphicUid = -1;

    /**
     * Creates a new IdentifyResultsJPanel.
     * @param mapController the application's MapController.
     */
    public IdentifyResultsJPanel(MapController mapController) {
        initComponents();
        graphicsLayer = new GraphicsLayer();
        graphicsLayer.setName("Identify Results");
        this.mapController = mapController;

        lineSymbol = new SimpleLineSymbol(Color.CYAN, 3);
        fillSymbol = new SimpleFillSymbol(new Color(255, 255, 255, 0), lineSymbol);
        markerSymbol = new SimpleMarkerSymbol(Color.CYAN, 10, SimpleMarkerSymbol.Style.CIRCLE);
        Symbol idSymbol = null;
        try {
            idSymbol = new PictureMarkerSymbol(ImageIO.read(getClass().getResource("/com/esri/vehiclecommander/resources/target.png")));
        } catch (IOException ex) {
            Logger.getLogger(IdentifyResultsJPanel.class.getName()).log(Level.SEVERE, null, ex);
            idSymbol = new SimpleMarkerSymbol(Color.RED, 20, SimpleMarkerSymbol.Style.CROSS);
        }
        identifyPointSymbol = idSymbol;

    }    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton_previous = new javax.swing.JButton();
        jButton_next = new javax.swing.JButton();
        jButton_close = new javax.swing.JButton();
        jPanel_headerText = new javax.swing.JPanel();
        jLabel_mgrs = new javax.swing.JLabel();
        jLabel_counter = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane_results = new javax.swing.JScrollPane();
        jScrollPane_results.getViewport().setOpaque(false);
        jPanel1 = new javax.swing.JPanel();
        jPanel_results = new javax.swing.JPanel();
        jLabel_resultName = new javax.swing.JLabel();
        jLabel_distance = new javax.swing.JLabel();
        jLabel_bearing = new javax.swing.JLabel();

        setOpaque(false);

        jButton_previous.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/esri/vehiclecommander/resources/Nav-Controls-West-Normal.png"))); // NOI18N
        jButton_previous.setBorderPainted(false);
        jButton_previous.setContentAreaFilled(false);
        jButton_previous.setFocusable(false);
        jButton_previous.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton_previous.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/esri/vehiclecommander/resources/Nav-Controls-West-Pressed.png"))); // NOI18N
        jButton_previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_previousActionPerformed(evt);
            }
        });

        jButton_next.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/esri/vehiclecommander/resources/Nav-Controls-East-Normal.png"))); // NOI18N
        jButton_next.setBorderPainted(false);
        jButton_next.setContentAreaFilled(false);
        jButton_next.setFocusable(false);
        jButton_next.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton_next.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/esri/vehiclecommander/resources/Nav-Controls-East-Pressed.png"))); // NOI18N
        jButton_next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_nextActionPerformed(evt);
            }
        });

        jButton_close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/esri/vehiclecommander/resources/X-Normal.png"))); // NOI18N
        jButton_close.setBorderPainted(false);
        jButton_close.setContentAreaFilled(false);
        jButton_close.setFocusable(false);
        jButton_close.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton_close.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/esri/vehiclecommander/resources/X-Pressed.png"))); // NOI18N
        jButton_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_closeActionPerformed(evt);
            }
        });

        jPanel_headerText.setOpaque(false);
        jPanel_headerText.setLayout(new java.awt.BorderLayout());

        jLabel_mgrs.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel_mgrs.setText("MGRS");
        jPanel_headerText.add(jLabel_mgrs, java.awt.BorderLayout.WEST);

        jLabel_counter.setFont(new java.awt.Font("Arial", 1, 18));
        jLabel_counter.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel_counter.setText("0 of 0");
        jPanel_headerText.add(jLabel_counter, java.awt.BorderLayout.EAST);

        jScrollPane_results.setBorder(null);
        jScrollPane_results.setHorizontalScrollBar(null);
        jScrollPane_results.setOpaque(false);

        jPanel1.setOpaque(false);
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel_results.setOpaque(false);
        jPanel_results.setLayout(new java.awt.GridBagLayout());
        jPanel1.add(jPanel_results, java.awt.BorderLayout.NORTH);

        jScrollPane_results.setViewportView(jPanel1);

        jLabel_resultName.setFont(new java.awt.Font("Arial", 1, 24));
        jLabel_resultName.setText("Result Name");

        jLabel_distance.setFont(new java.awt.Font("Arial", 1, 18));
        jLabel_distance.setText("Distance:");

        jLabel_bearing.setFont(new java.awt.Font("Arial", 1, 18));
        jLabel_bearing.setText("Bearing:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane_results, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton_previous)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_next)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_close))
                    .addComponent(jLabel_resultName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                    .addComponent(jPanel_headerText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                    .addComponent(jLabel_distance, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_bearing, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel_resultName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_headerText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_distance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_bearing)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane_results, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton_close)
                    .addComponent(jButton_next)
                    .addComponent(jButton_previous))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Sets the identify results, and displays the first result.
     * @param results the identify results.
     * @param resultToLayer a mapping from each result to the layer from which it came.
     *                      This is used to get attachments for each result. You can
     *                      pass null if you don't need attachments.
     */
    public void setResults(IdentifiedItem[] results, Map<IdentifiedItem, Layer> resultToLayer) {
        this.results = results;
        if (null == resultToLayer) {
            resultToLayer = new HashMap<IdentifiedItem, Layer>();
        }
        this.resultToLayer = resultToLayer;
        currentIndex = 0;
        showCurrentResult();
    }

    /**
     * Shows the panel with the current result.
     */
    public void showCurrentResult() {
        if (-1 != identifyFeatureGraphicUid) {
            graphicsLayer.removeGraphic(identifyFeatureGraphicUid);
        }
        jPanel_results.removeAll();
        Geometry geom = null;
        if (null == results || 0 >= results.length) {
            jLabel_counter.setText("0 of 0");
            jLabel_resultName.setText("");
            jLabel_distance.setText("Distance:");
            jLabel_bearing.setText("Bearing:");
        } else {
            if (results.length <= currentIndex) {
                currentIndex = 0;
            } else if (0 > currentIndex) {
                currentIndex = results.length - 1;
            }
            jLabel_counter.setText((currentIndex + 1) + " of " + results.length);
            final IdentifiedItem result = results[currentIndex];
            geom = result.getGeometry();
            
            //Get attachments, if they are available
            Layer resultLayer = (null == resultToLayer ? null : resultToLayer.get(result));
            final ArcGISFeatureLayer featureLayer = mapController.getFeatureLayer(resultLayer, result.getLayerId());
            if (null != featureLayer && featureLayer.hasAttachments()) {
                featureLayer.queryAttachmentInfos(Integer.parseInt((String) result.getAttributes().get(featureLayer.getObjectIdField())), new CallbackListener<AttachmentInfo[]>() {

                    public void onCallback(AttachmentInfo[] attachmentInfos) {
                        finishShowingResult(result, attachmentInfos, featureLayer);
                    }

                    public void onError(Throwable e) {
                        finishShowingResult(result);
                    }
                    
                });
            } else {
                finishShowingResult(result);
            }
        }
        
        //Show distance and bearing from GPS location if available
        synchronized (gpsLocationLatLonLock) {
            boolean showedDistanceAndBearing = false;
            if (null != gpsLocationLatLon) {
                //Show them
                Point destinationMap = (geom instanceof Point) ? ((Point) geom) : identifyPoint;
                Point gpsLocationMap = (Point) GeometryEngine.project(gpsLocationLatLon, Utilities.WGS84, mapController.getSpatialReference());
                double distance = Math.sqrt(Math.pow(destinationMap.getX() - gpsLocationMap.getX(), 2.0) + Math.pow(destinationMap.getY() - gpsLocationMap.getY(), 2.0));
                Point destinationLatLon = (Point) GeometryEngine.project(destinationMap, mapController.getSpatialReference(), Utilities.WGS84);
                double bearing = Utilities.calculateBearingDegrees(gpsLocationLatLon, destinationLatLon);

                jLabel_distance.setText("Distance: " + Math.round(distance) + " " + mapController.getSpatialReference().getUnit().getAbbreviation());
                jLabel_bearing.setText("Bearing: " + Math.round(bearing) + "\u00B0");
                showedDistanceAndBearing = true;
            }
            if (!showedDistanceAndBearing) {
                jLabel_distance.setText("");
                jLabel_bearing.setText("");
            }
        }
    }
    
    private void finishShowingResult(IdentifiedItem result) {
        finishShowingResult(result, new AttachmentInfo[0], null);
    }
    
    private void finishShowingResult(
            final IdentifiedItem result,
            AttachmentInfo[] attachmentInfos,
            final ArcGISFeatureLayer featureLayer) {
        jLabel_resultName.setText(result.getValue().toString());
        Map<String, Object> attributes = result.getAttributes();
        Iterator<String> keys = attributes.keySet().iterator();
        ArrayList<String> keyList = new ArrayList<String>();
        ArrayList<Object> valueList = new ArrayList<Object>();
        while (keys.hasNext()) {
            String key = keys.next();
            keyList.add(key);
            valueList.add(attributes.get(key));
        }
        Object[][] dataArray = new Object[keyList.size()][];
        for (int i = 0; i < keyList.size(); i++) {
            dataArray[i] = new Object[]{keyList.get(i), "".equals(valueList.get(i)) ? " " : valueList.get(i)};
        }

        GridBagConstraints c = new GridBagConstraints();
        c.fill = GridBagConstraints.HORIZONTAL;
        Font font = new Font("Arial", Font.PLAIN, 18);
        Color evenBackground = new Color(244, 245, 247);
        Color oddBackground = Color.WHITE;
        int y = 0;
        for (; y < dataArray.length; y++) {
            c.gridx = 0;
            c.gridy = y;
            c.gridwidth = 1;
            c.anchor = GridBagConstraints.LINE_START;
            JLabel key = new JLabel((String) dataArray[y][0]);
            key.setOpaque(true);
            key.setFont(font);
            key.setBackground(0 == y % 2 ? evenBackground : oddBackground);
            jPanel_results.add(key, c);
            c.gridx = 1;
            c.anchor = GridBagConstraints.LINE_END;
            JLabel value = new JLabel((String) dataArray[y][1]);
            value.setOpaque(true);
            value.setFont(font);
            value.setBackground(0 == y % 2 ? evenBackground : oddBackground);
            jPanel_results.add(value, c);
        }
        for (final AttachmentInfo attInfo : attachmentInfos) {
            c.gridx = 0;
            c.gridy = y;
            c.gridwidth = 2;
            c.anchor = GridBagConstraints.LINE_START;
            JButton button = new JButton("Open " + attInfo.getName());
            button.setFont(font);
            button.setFocusable(false);
            button.setPreferredSize(new Dimension(jPanel_results.getWidth(), 60));
            button.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    BrowserLauncher.openURL(featureLayer.getAttachmentURL(
                            Integer.parseInt((String) result.getAttributes().get(featureLayer.getObjectIdField())),
                            (int) attInfo.getId()));
                }
            });
            jPanel_results.add(button, c);
            
            y++;
        }
        //Force the GridBagLayout to fill jPanel_results
        LayoutManager layout = jPanel_results.getLayout();
        GridBagLayout gbl = (layout instanceof GridBagLayout) ? ((GridBagLayout) layout) : null;
        jPanel_results.getLayout().layoutContainer(jPanel_results);
        // Set weights of all columns and rows to 1
        double[][] weights = gbl.getLayoutWeights();
        Arrays.fill(weights[0], 1);
        gbl.columnWeights = weights[0];
        //Uncomment these lines to fill the vertical space too
//            Arrays.fill(weights[1], 1);
//            gbl.rowWeights = weights[1];

        //Highlight feature on map
        if (!isGraphicsLayerAdded) {
            mapController.addLayer(Integer.MAX_VALUE, graphicsLayer, false);
            isGraphicsLayerAdded = true;
        }
        Geometry geom = result.getGeometry();
        Graphic identifyFeatureGraphic;
        if (geom instanceof Envelope || geom instanceof Polygon) {
            //set fill symbol with outline
            identifyFeatureGraphic = new Graphic(geom, fillSymbol);
        } else if (geom instanceof Polyline || geom instanceof Segment) {
            //set line symbol
            identifyFeatureGraphic = new Graphic(geom, lineSymbol);
        } else {
            //set point symbol
            identifyFeatureGraphic = new Graphic(geom, markerSymbol);
        }
        identifyFeatureGraphicUid = graphicsLayer.addGraphic(identifyFeatureGraphic);
    }

    /**
     * Sets the point that was used for the identify operation, for display purposes.
     * Ignored if null.
     * @param pt The point that was used for the identify operation, for display
     *           purposes. Ignored if null.
     */
    public void setIdentifyPoint(Point pt) {
        identifyPoint = pt;
        if (null != pt) {
            graphicsLayer.setVisible(true);
            if (!isGraphicsLayerAdded) {
                mapController.addLayer(Integer.MAX_VALUE, graphicsLayer, false);
                isGraphicsLayerAdded = true;
            }
            String mgrs = mapController.pointToMgrs(pt, mapController.getSpatialReference());
            jLabel_mgrs.setText(mgrs);

            if (-1 != identifyPointGraphicUid) {
                graphicsLayer.updateGraphic(identifyPointGraphicUid, pt);
            } else {
                identifyPointGraphicUid = graphicsLayer.addGraphic(new Graphic(pt, identifyPointSymbol));
            }

        }
    }

    /**
     * Called when the GPSProvider has a GPS fix available.
     * @param latLonPoint the GPS fix point.
     */
    public void handleGPSFix(Point latLonPoint) {
        synchronized (gpsLocationLatLonLock) {
            gpsLocationLatLon = latLonPoint;
        }
    }

    private void jButton_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_closeActionPerformed
        setVisible(false);
        graphicsLayer.removeAll();
        identifyPointGraphicUid = -1;
        identifyFeatureGraphicUid = -1;
        graphicsLayer.setVisible(false);
    }//GEN-LAST:event_jButton_closeActionPerformed

    private void jButton_nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_nextActionPerformed
        currentIndex++;
        showCurrentResult();
    }//GEN-LAST:event_jButton_nextActionPerformed

    private void jButton_previousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_previousActionPerformed
        currentIndex--;
        showCurrentResult();
    }//GEN-LAST:event_jButton_previousActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_close;
    private javax.swing.JButton jButton_next;
    private javax.swing.JButton jButton_previous;
    private javax.swing.JLabel jLabel_bearing;
    private javax.swing.JLabel jLabel_counter;
    private javax.swing.JLabel jLabel_distance;
    private javax.swing.JLabel jLabel_mgrs;
    private javax.swing.JLabel jLabel_resultName;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel_headerText;
    private javax.swing.JPanel jPanel_results;
    private javax.swing.JScrollPane jScrollPane_results;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables

    /**
     * Called when GPS position changes.
     * @param newPosition the new position.
     */
    public void onLocationChanged(Location location){
        if (null != location) {
            handleGPSFix(new Point(location.getLongitude(), location.getLatitude()));
        }
    }

    public void onStateChanged(LocationProvider.LocationProviderState state) {
        
    }

}
